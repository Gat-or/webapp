#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('https');
var socketio = require('socket.io');
var cors = require('cors');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var allowedOrigins = "http://localhost/room/";
var io = socketio(server, {
  transports: [ 'websocket' ],
  // origins: allowedOrigins,
  wsEngine: 'ws',
  
  cors: {
    //origin: "http://ec2-54-219-202-42.us-west-1.compute.amazonaws.com/",
    origin: "http://localhost",
    methods: ["GET", "POST"],

  }
});

let interval;
let video;
let videos = [];
let videoTimes = [];
let videoPause = [];
let viewers = [];
let usernamesOnConnect = []
let guestUsername = [];
let guestNumber = [];
let videoTitles = [];


//when client connects
io.on('connection', (socket) => {

  if (interval) {
    clearInterval(interval);
  }
 // interval = setInterval(() => getApiAndEmit(socket), 1000);

  //when user joins a room
  socket.on('room', (room, username) => {
    console.log("New client connected");

    socket.join(room);

    //if user is a guest give user a guest name
    if(username == "Guest") {
      if(typeof guestNumber[room] === 'undefined') {
        guestNumber[room] = 0;
      }
      guestNumber[room]++;
      username = "Guest" + guestNumber[room];
      guestUsername[room] = username;
      io.to(room).emit('guestUsername', guestUsername[room]);
    }
    
    //if a username is assigned send a message that the user has joined chat
    if(username != '') {
      io.to(room).emit('message', username + ' has joined the chat');
    }
    
    io.to(room).emit('startVideoTime', 'starting video time');
    
    //when user disconnects
    socket.on('disconnect', () => {

      //if a username is assigned send a message that the user has left chat
      if(username != '') {
        io.to(room).emit('message', username + ' has left the chat');
      }
      
      console.log("Client disconnected");
      clearInterval(interval);
    });
  });

  //when user joins room initiallize video stats
  socket.on('video', (room) => {
    socket.join(room);
     //update number of viewers in a room
    io.to(room).emit('videoLink', videos[room]);
    io.to(room).emit('videoTime', videoTimes[room]);
    io.to(room).emit('pause', videoPause[room]);
    socket.on('disconnect', () => {
      //update viewers in the room
      console.log("Client disconnected" + room);
      clearInterval(interval);
    });
  });

  socket.on('roomInfoBanner', (room) => {
    socket.join(room);
    if(typeof viewers[room] === 'undefined') {
      viewers[room] = 0;
    } else {
      viewers[room]++;
    }
    io.to(room).emit('viewers', viewers[room]);
    
    console.log(viewers[room]);
    io.to(room).emit('videoTitle', videoTitles[room]);
    socket.on('disconnect', () => {
      viewers[room]--; 
      io.to(room).emit('viewers', viewers[room]);
      console.log("Client disconnected");
      clearInterval(interval);
    });
  });

  socket.on('setGuestname', (room) => {
    io.to(room).emit('guestUsername', guestUsername[room]);
  });

  socket.on('sendMessage', (room, message) => {
    io.to(room).emit('message', message);
  });

  socket.on('setVideoLink', (room, videoLink) => {
    video = videoLink;
    videos[room] = videoLink;
    io.to(room).emit('videoLink', videoLink);
  });

  socket.on('setVideoTitle', (room, videoTitle) => {
    videoTitles[room] = videoTitle;
    io.to(room).emit('videoTitle', videoTitle);
  });

  socket.on('setVideoTime', (room, time) => {
    videoTimes[room] = time;
    io.to(room).emit('videoTime', time);
  });

  socket.on('setPause', (room, pause) => {
    videoPause[room] = pause;
    io.to(room).emit('pause', pause);
  });

});

/*
const getApiAndEmit = socket => {
  const response = "hi" + new Date();

  socket.emit('FromAPI', response);
};*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`listening to port , ${port}`));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
